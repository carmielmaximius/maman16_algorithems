#!/usr/bin/env python3

import socket
import threading
import json
import queue

# In-memory store of each user's ephemeral public key.
# public_keys[user_id] = ephemeral_public_bytes (hex-encoded)
public_keys = {}

# In-memory store of queued encrypted messages.
# messages[user_id] = queue.Queue() with entries (sender_id, ciphertext_hex)
messages = {}

def client_handler(conn, addr):
    """
    Handles incoming commands from a connected client.
    """
    global public_keys, messages

    with conn:
        while True:
            data = conn.recv(4096)
            if not data:
                break

            try:
                request = json.loads(data.decode('utf-8'))
            except:
                # If there's a JSON parsing error, ignore this chunk and continue listening
                continue

            command = request.get("command")
            user_id = request.get("user_id")  # 4-digit ID

            if command == "REGISTER":
                # Register ephemeral public key for the user
                ephemeral_pub = request.get("ephemeral_public")
                public_keys[user_id] = ephemeral_pub
                # Ensure user has an outgoing queue
                if user_id not in messages:
                    messages[user_id] = queue.Queue()
                response = {"status": "OK", "detail": "Registered ephemeral key"}
                conn.sendall(json.dumps(response).encode('utf-8'))

            elif command == "FETCH_KEY":
                # Return ephemeral public key for target_id
                target_id = request.get("target_id")
                ephemeral_pub = public_keys.get(target_id)
                if ephemeral_pub is not None:
                    response = {
                        "status": "OK",
                        "ephemeral_public": ephemeral_pub
                    }
                else:
                    response = {
                        "status": "ERROR",
                        "detail": "No public key found for target"
                    }
                conn.sendall(json.dumps(response).encode('utf-8'))

            elif command == "SEND":
                # Store an encrypted message for the target
                target_id = request.get("target_id")
                ciphertext_hex = request.get("ciphertext")
                sender_id = user_id
                if target_id not in messages:
                    messages[target_id] = queue.Queue()
                messages[target_id].put((sender_id, ciphertext_hex))
                response = {"status": "OK", "detail": "Message stored for delivery"}
                conn.sendall(json.dumps(response).encode('utf-8'))

            elif command == "RECEIVE":
                # Client wants to receive new messages
                if user_id not in messages:
                    messages[user_id] = queue.Queue()

                user_queue = messages[user_id]
                out = []
                while not user_queue.empty():
                    out.append(user_queue.get())

                response = {
                    "status": "OK",
                    "messages": out  # list of (sender_id, ciphertext_hex)
                }
                conn.sendall(json.dumps(response).encode('utf-8'))

            else:
                response = {"status": "ERROR", "detail": "Unknown command"}
                conn.sendall(json.dumps(response).encode('utf-8'))


def start_server(host="127.0.0.1", port=5000):
    """
    Multi-threaded server to handle multiple clients.
    """
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(5)
    print(f"Server listening on {host}:{port}")

    while True:
        conn, addr = server_socket.accept()
        print(f"Incoming connection from {addr}")
        thread = threading.Thread(target=client_handler, args=(conn, addr))
        thread.daemon = True
        thread.start()


if __name__ == "__main__":
    start_server()
